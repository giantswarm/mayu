#cloud-config
hostname: {{.Host.Hostname}}
coreos:
  units:
  - name: update-engine.service
    enable: false
    command: stop
    mask: true
  - name: locksmithd.service
    command: stop
    mask: true
  - name: systemd-modules-load.service
    command: restart
{{if eq .ClusterNetwork.NetworkModel "bond"}}{{template "net_bond" .}}{{end}}
{{if eq .ClusterNetwork.NetworkModel "singlenic"}}{{template "net_singlenic" .}}{{end}}
  - name: refresh-network-ifs.service
    command: start
    enable: true
    content: |
      [Unit]
      Description=Restart network interfaces
      Before=ensure-connectivity.service
      Wants=ensure-connectivity.service

      [Service]
      Type=oneshot
      ExecStart=/tmp/restart-network
      RemainAfterExit=yes

      [Install]
      WantedBy=multi-user.target
  - name: ensure-connectivity.service
    command: start
    content: |
      [Unit]
      Description=Ensures theres connectivity before starting fleet and etcd3
      After=systemd-networkd.service
      Wants=systemd-networkd.service
      Before=etcd3.service

      [Service]
      Type=oneshot
      ExecStart=/bin/sh -c 'while [[ -z $(curl -k -s {{index .TemplatesEnv "mayu_https_endpoint"}}) ]] ; do sleep 2 ; done'
      RemainAfterExit=yes

      [Install]
      WantedBy=multi-user.target
  - name: finish-install.service
    command: start
    enable: true
    content: |
      [Unit]
      Description=finish mayu installation
      Before=etcd3.service docker.service

      [Service]
      Type=oneshot
      ExecStartPre=/usr/bin/mkdir -p /opt/bin
      ExecStartPre=/bin/sh -c 'while [[ -z $(curl -s {{index .TemplatesEnv "mayu_https_endpoint"}}) ]] ; do sleep 2 ; done'
      ExecStart=/usr/bin/docker run --privileged=true -v /dev:/dev -v /sys:/sys --net=host quay.io/giantswarm/mayuctl:latest boot-complete --host={{index .TemplatesEnv "mayu_api_ip"}} --port={{.MayuPort}} {{if .NoTLS}}--no-tls{{end}} --update-versions
      RemainAfterExit=yes

      [Install]
      WantedBy=multi-user.target
  - name: etcd2.service
    enable: false
    command: stop
    mask: true
  - name: fleet.service
    enable: true
    command: start
  - name: flanneld.service
    enable: false
    command: stop
    mask: true
  - name: docker-tcp.socket
    enable: true
    command: start
    content: |
      [Unit]
      Description=Docker Socket for the API

      [Socket]
      ListenStream=2375
      Service=docker.service
      BindIPv6Only=both

      [Install]
      WantedBy=sockets.target
  - name: docker.service
    drop-ins:
      - name: 40-docker.conf
        content: |
          [Unit]
          Requires=docker-tcp.socket
          After=docker-tcp.socket
          [Service]
          Environment="DOCKER_OPTS=--iptables=true --storage-driver=overlay  --log-opt max-size=50m --log-opt max-file=1"
          Environment="DOCKER_OPT_BIP="
          Environment="DOCKER_OPT_IPMASQ="
          Environment="DOCKER_OPT_MTU="

{{if eq .Host.Profile "core"}}
{{template "core_units" .}}
{{else}}
{{template "worker_units" .}}
{{end}}

  update:
    reboot-strategy: off
write_files:
- path: /tmp/restart-network
  permissions: 0755
  owner: root
  content: |
    #!/bin/bash
    for i in /sys/class/net/en* ; do ip link set  $(basename $i) down ; done ; sleep 1 ; systemctl restart systemd-networkd ; sleep 5
{{if eq .ClusterNetwork.NetworkModel "bond"}}
- path: /etc/modprobe.d/bonding.conf
  permissions: 0644
  owner: root
  content: options bonding miimon=100 mode=4 lacp_rate=1
- path: /etc/modules-load.d/bonding.conf
  permissions: 0644
  owner: root
  content: bonding
{{end}}
- path: /etc/hosts
  permissions: 0644
  owner: root
  content: |
    127.0.0.1 localhost
    127.0.0.1 {{.Host.Hostname}}
- path: /etc/resolv.conf
  permissions: 0644
  owner: root
  content: |
    {{ range $server := .ClusterNetwork.DNS }}nameserver {{ $server }}
    {{ end }}

{{if eq .Host.Profile "core-g8s"}}
{{template "core_files" .}}
{{else}}
{{template "worker_files" .}}
{{end}}

users:
{{ range $index, $user := (index .TemplatesEnv "users")}}  - name: {{ $user.Name }}
    groups:
      - "sudo"
      - "docker"
      - "rkt"
    ssh-authorized_keys:
       - "{{ $user.Key }}"
{{end}}
