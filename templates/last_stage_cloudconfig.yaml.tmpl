#cloud-config
---

hostname: {{.Host.Hostname}}

ssh_authorized_keys:
{{range $index, $pubkey := (index .TemplatesEnv "ssh_authorized_keys") }}
  - {{ $pubkey }}
{{ end}}

write_files:
  - path: "/etc/systemd/system/fleet.service.d/30-giantswarm.conf"
    permissions: 420
    owner: root
    content: |
      [Service]
      {{if .Host.FleetMetadata }}
      Environment="FLEET_METADATA={{.Host.FleetMetadata}}"
      {{ end}}
      Environment="FLEET_DISABLE_ENGINE=false"

  - path: "/etc/systemd/system/flanneld.service"
    permissions: 356
    content: |
      [Unit]
      Description=Network fabric for containers
      Documentation=https://github.com/coreos/flannel
      Requires=early-docker.service
      After=etcd.service etcd2.service early-docker.service
      Before=early-docker.target

      [Service]
      Type=notify
      Restart=always
      RestartSec=5
      Environment="TMPDIR=/var/tmp/"
      Environment="DOCKER_HOST=unix:///var/run/early-docker.sock"
      Environment="FLANNEL_VER=0.5.5"
      Environment="FLANNEL_IMG=quay.io/coreos/flannel"
      Environment="ETCD_SSL_DIR=/etc/ssl/etcd"
      Environment="FLANNEL_ENV_FILE=/run/flannel/options.env"
      LimitNOFILE=40000
      LimitNPROC=1048576
      ExecStartPre=/sbin/modprobe ip_tables
      ExecStartPre=/usr/bin/mkdir -p /run/flannel
      ExecStartPre=/usr/bin/mkdir -p ${ETCD_SSL_DIR}
      ExecStartPre=-/usr/bin/touch ${FLANNEL_ENV_FILE}

      ExecStart=/usr/libexec/sdnotify-proxy /run/flannel/sd.sock \
        /usr/bin/docker run --net=host --privileged=true --rm \
        --volume=/run/flannel:/run/flannel \
        --env=NOTIFY_SOCKET=/run/flannel/sd.sock \
        --env=AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} \
        --env=AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} \
        --env-file=${FLANNEL_ENV_FILE} \
        --volume=/usr/share/ca-certificates:/etc/ssl/certs:ro \
        --volume=${ETCD_SSL_DIR}:${ETCD_SSL_DIR}:ro \
        ${FLANNEL_IMG}:${FLANNEL_VER} /opt/bin/flanneld --listen=0.0.0.0:8889 --ip-masq=true

      # Update docker options
      ExecStartPost=/usr/bin/docker run --net=host --rm --volume=/run:/run \
        ${FLANNEL_IMG}:${FLANNEL_VER} \
        /opt/bin/mk-docker-opts.sh -d /run/flannel_docker_opts.env -i

      [Install]
      WantedBy=multi-user.target

# {{/*
#   - path: /etc/hosts
#     permissions: 0644
#     owner: root
#     content: |
#       127.0.0.1 localhost
#       127.0.0.1 {{.Host.Hostname}}
#       127.0.0.1 etcd.giantswarm
# */}}

  - path: /etc/resolv.conf
    permissions: 0644
    owner: root
    content: |
      {{range $server := .ClusterNetwork.DNS }}
      nameserver {{ $server }}
      {{ end}}

# {{/*
#   {{if index .TemplatesEnv "yochu_version" }}
#   - path: /etc/yochu-env
#     permissions: 0644
#     owner: root
#     content: |
#       YOCHU_VERSION={{index .TemplatesEnv "yochu_version"}}
#       DOCKER_VERSION={{index .TemplatesEnv "docker_version"}}
#       ETCD_VERSION={{index .TemplatesEnv "etcd_version"}}
#       FLEET_VERSION={{index .TemplatesEnv "fleet_version"}}
#       RKT_VERSION={{index .TemplatesEnv "rkt_version"}}
#       K8S_VERSION={{index .TemplatesEnv "k8s_version"}}
#   {{ end}}
# */}}

coreos:
  update:
    reboot-strategy: off

  etcd2:
    {{if .EtcdDiscoveryUrl }}
    discovery: {{.EtcdDiscoveryUrl}}
    {{ end}}
    advertise-client-urls: http://{{.Host.InternalAddr}}:2379
    initial-advertise-peer-urls: http://{{.Host.InternalAddr}}:2380
    listen-client-urls: http://0.0.0.0:2379,http://0.0.0.0:4001
    listen-peer-urls: http://{{.Host.InternalAddr}}:2380,http://{{.Host.InternalAddr}}:7001

  fleet:
    public-ip: {{.Host.InternalAddr}}

  flannel:
    interface: {{.Host.InternalAddr}}

  units:
    - name: systemd-networkd-wait-online.service
      enable: true
      command: start

{{if eq .ClusterNetwork.NetworkModel "bond"}}{{template "net_bond" .}}{{end}}
{{if eq .ClusterNetwork.NetworkModel "singlenic"}}{{template "net_singlenic" .}}{{end}}
{{if eq .ClusterNetwork.NetworkModel "bridge"}}{{template "net_bridge" .}}{{end}}
{{if eq .ClusterNetwork.NetworkModel "bridge_dhcp"}}{{template "net_bridge_dhcp" .}}{{end}}

# {{/*
#     - name: 15-br0.netdev
#       runtime: true
#       content: |
#         [NetDev]
#         Name=br0
#         Kind=bridge
#
#     - name: 15-br0.network
#       runtime: true
#       content: |
#         [Match]
#         Name=br0
#         [Network]
#         Address=172.17.11.1/24
#         DHCPServer=yes
#         DNS=8.8.8.8
#         IPMasquerade=yes
# */}}

    - name: update-engine.service
      command: stop
      mask: true

    - name: locksmithd.service
      command: stop
      mask: true

    - name: systemd-modules-load.service
      command: restart

    - name: etcd2.service
      command: start

    - name: fleet.service
      command: start

    - name: flanneld-client.service
      enable: true
      command: start
      content: |
        [Unit]
        Description=Flanneld client
        Requires=early-docker.service
        After=etcd.service etcd2.service early-docker.service flanneld.service
        Before=early-docker.target

        [Service]
        Type=notify
        Restart=always
        RestartSec=5
        Environment="TMPDIR=/var/tmp/"
        Environment="DOCKER_HOST=unix:///var/run/early-docker.sock"
        Environment="FLANNEL_VER=0.5.5"
        Environment="FLANNEL_IMG=quay.io/coreos/flannel"
        Environment="ETCD_SSL_DIR=/etc/ssl/etcd"
        Environment="FLANNEL_ENV_FILE=/run/flannel/options.env"
        LimitNOFILE=40000
        LimitNPROC=1048576
        ExecStartPre=/sbin/modprobe ip_tables
        ExecStartPre=/usr/bin/mkdir -p /run/flannel
        ExecStartPre=/usr/bin/mkdir -p ${ETCD_SSL_DIR}
        ExecStartPre=-/usr/bin/touch ${FLANNEL_ENV_FILE}

        ExecStart=/usr/libexec/sdnotify-proxy /run/flannel/sd.sock \
          /usr/bin/docker run --net=host --privileged=true --rm \
          --volume=/run/flannel:/run/flannel \
          --env=NOTIFY_SOCKET=/run/flannel/sd.sock \
          --env=AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID} \
          --env=AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY} \
          --env-file=${FLANNEL_ENV_FILE} \
          --volume=/usr/share/ca-certificates:/etc/ssl/certs:ro \
          --volume=${ETCD_SSL_DIR}:${ETCD_SSL_DIR}:ro \
          ${FLANNEL_IMG}:${FLANNEL_VER} /opt/bin/flanneld --remote={{.Host.InternalAddr}}:8889 --ip-masq=true

        # Update docker options
        ExecStartPost=/usr/bin/docker run --net=host --rm --volume=/run:/run \
          ${FLANNEL_IMG}:${FLANNEL_VER} \
          /opt/bin/mk-docker-opts.sh -d /run/flannel_docker_opts.env -i

        [Install]
        WantedBy=multi-user.target

    - name: flanneld.service
      command: start

    - name: set-flannel-etcd-config.service
      command: start
      enable: true
      content: |
        [Unit]
        Description=Set the COREOS /coreos.com/network/config key
        Wants=etcd2.service
        After=etcd2.service

        [Service]
        ExecStart=-/usr/bin/etcdctl mk /coreos.com/network/config '{"Network":"10.0.3.0/16","Backend":{"Type":"vxlan"}}'

    - name: docker.service
      drop-ins:
      - name: 40-docker.conf
        content: |
          [Service]
          EnvironmentFile=/run/flannel/options.env
          [Unit]
          Requires=flanneld-client.service
          After=flanneld-client.service

    - name: set-giantswarm-environment.service
      command: start
      enable: true
      content: |
        [Unit]
        Description=Configures giantswarm environment
        Wants=network-online.target
        After=network-online.target

        [Service]
        Type=oneshot
        ExecStart=/bin/sh -c 'echo "COREOS_PRIVATE_IPV4={{.Host.InternalAddr}}" > /etc/environment'

        [Install]
        WantedBy=multi-user.target

    - name: build-k8s-vm-images.service
      command: start
      enable: true
      content: |
        [Unit]
        Description=Build the images needed to run the vms
        Wants=docker.service
        After=docker.service

        [Service]
        Type=oneshot
        ExecStartPre=-/bin/mkdir -p /home/core/images
        ExecStartPre=-/usr/bin/wget -O /home/core/build-image.sh https://s3-eu-west-1.amazonaws.com/downloads.giantswarm.io/k8s/build_image.sh
        ExecStartPre=-/usr/bin/chmod 775 /home/core/build-image.sh
        ExecStart=-/home/core/build-image.sh

        [Install]
        WantedBy=multi-user.target
