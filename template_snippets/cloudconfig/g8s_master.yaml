{{define "g8s_master_units"}}
  - name: calico-node.service
    runtime: true
    command: start
    content: |
      [Unit]
      Description=Calico per-host agent
      Requires=etcd2.service
      After=etcd2.service
      Wants=etcd2.service

      [Service]
      Restart=always
      RestartSec=0
      TimeoutStopSec=10
      StartLimitIntervalSec=0
      EnvironmentFile=/etc/environment
      Environment="ETCD_AUTHORITY=127.0.0.1:2379"
      ExecStartPre=/usr/bin/mkdir -p /opt/cni/bin
      ExecStartPre=/usr/bin/wget -O /opt/cni/bin/calico {{index .TemplatesEnv "yochu_http_endpoint"}}/calico-cni/{{index .TemplatesEnv "calico_cni_version"}}/calico
      ExecStartPre=/usr/bin/chmod +x /opt/cni/bin/calico
      ExecStartPre=/usr/bin/wget -O /opt/cni/bin/calico-ipam {{index .TemplatesEnv "yochu_http_endpoint"}}/calico-cni/{{index .TemplatesEnv "calico_cni_version"}}/calico-ipam
      ExecStartPre=/usr/bin/chmod +x /opt/cni/bin/calico-ipam
      ExecStartPre=/usr/bin/mkdir -p /opt/bin/
      ExecStartPre=/usr/bin/wget -O /opt/bin/calicoctl {{index .TemplatesEnv "yochu_http_endpoint"}}/calicoctl/{{index .TemplatesEnv "calico_version"}}/calicoctl
      ExecStartPre=/usr/bin/chmod +x /opt/bin/calicoctl
      {{if eq .Host.Profile "core-g8s"}}
      ExecStartPre=/opt/bin/calicoctl pool add {{index .TemplatesEnv "calico_g8s_subnet"}} {{index .TemplatesEnv "calico_pool_options"}}
      {{end}}
      ExecStart=/opt/bin/calicoctl node --ip={{.Host.InternalAddr}}  --detach=false --node-image={{index .TemplatesEnv "yochu_private_registry"}}/giantswarm/node:{{index .TemplatesEnv "calico_version"}}
      ExecStartPost=/usr/sbin/iptables -I FORWARD -s {{index .TemplatesEnv "yochu_localsubnet"}} -d {{index .TemplatesEnv "calico_g8s_subnet"}} -j ACCEPT
      ExecStartPost=/usr/sbin/iptables -I FORWARD -d {{index .TemplatesEnv "yochu_localsubnet"}} -s {{index .TemplatesEnv "calico_g8s_subnet"}} -j ACCEPT
      ExecStop=/opt/bin/calicoctl node stop --force
      ExecStopPost=/bin/bash -c "find /tmp/ -name '_MEI*' | xargs -I {} rm -rf {}"
      ExecStopPost=/usr/sbin/iptables -D FORWARD -s {{index .TemplatesEnv "yochu_localsubnet"}} -d {{index .TemplatesEnv "calico_g8s_subnet"}} -j ACCEPT
      ExecStopPost=/usr/sbin/iptables -D FORWARD -d {{index .TemplatesEnv "yochu_localsubnet"}} -s {{index .TemplatesEnv "calico_g8s_subnet"}} -j ACCEPT

      [Install]
      WantedBy=multi-user.target
  - name: g8s-master-api-certs.service
    enable: true
    command: start
    content: |
      [Unit]
      Description=g8s-master-api-certs
      Requires=docker.service
      After=docker.service

      [Service]
      EnvironmentFile=/etc/environment
      Environment=VAULT_TOKEN={{index .TemplatesEnv "sa_vault_token"}}
      Environment=VAULT_ADDR={{index .TemplatesEnv "vault_addr"}}
      Type=oneshot
      RemainAfterExit=yes
      ExecStartPre=/usr/bin/mkdir -p /etc/giantswarm/g8s/ssl/master/
      ExecStartPre=/bin/bash -c 'export rsa_key=$(docker run --rm -i --net host --privileged=true -e VAULT_ADDR -e VAULT_TOKEN giantswarm/docker-vault:0.1.0 read -field=key secret/g8s_sa_sign_key 2>/dev/null); echo -e "-----BEGIN RSA PRIVATE KEY-----\n$rsa_key\n-----END RSA PRIVATE KEY-----" > /etc/giantswarm/g8s/ssl/master/sa_private_key.pem'
      ExecStart=/usr/bin/docker run \
      --net=host \
      -v /etc/ssl/certs/ca-certificates.crt:/etc/ssl/certs/ca-certificates.crt \
      -v /etc/giantswarm/g8s/ssl/master/:/etc/kubernetes/ssl/ \
      {{index .TemplatesEnv "yochu_private_registry"}}/giantswarm/certctl:{{index .TemplatesEnv "certctl_version"}} \
      issue \
      --vault-addr={{index .TemplatesEnv "vault_addr"}} \
      --vault-token={{index .TemplatesEnv "vault_token"}} \
      --cluster-id={{index .TemplatesEnv "cluster_id"}} \
      --common-name=api.{{index .TemplatesEnv "common_name"}} \
      --ttl={{index .TemplatesEnv "g8s_certs_ttl"}} \
      --crt-file=/etc/kubernetes/ssl/apiserver.pem \
      --ip-sans={{index .TemplatesEnv "g8s_api_ip_sans"}} \
      --alt-names={{index .TemplatesEnv "g8s_api_alt_names"}} \
      --key-file=/etc/kubernetes/ssl/apiserver-key.pem \
      --ca-file=/etc/kubernetes/ssl/apiserver-ca.pem
      ExecStop=/usr/bin/rm -rf /etc/giantswarm/g8s/ssl/master/
  - name: g8s-kubelet.service
    enable: true
    command: start
    content: |
      [Unit]
      Description=g8s-kubelet
      Wants=calico-node.service g8s-master-api-certs
      After=calico-node.service

      [Service]
      Restart=always
      RestartSec=10
      EnvironmentFile=/etc/environment
      Environment="IMAGE={{index .TemplatesEnv "yochu_private_registry"}}/giantswarm/hyperkube:{{index .TemplatesEnv "hyperkube_version"}}"
      Environment="NAME=%p.service"
      Environment="NETWORK_CONFIG_CONTAINER="
      ExecStartPre=/usr/bin/docker pull $IMAGE
      ExecStartPre=-/usr/bin/docker stop -t 10 $NAME
      ExecStartPre=-/usr/bin/docker rm -f $NAME
      ExecStartPre=/usr/bin/mkdir -p /etc/kubernetes/cni/net.d/
      ExecStartPre=-/usr/bin/cp /srv/10-calico.conf /etc/kubernetes/cni/net.d/10-calico.conf
      ExecStart=/bin/sh -c "/usr/bin/docker run --rm --pid=host --net=host --privileged=true \
      -v /:/rootfs:ro \
      -v /usr/lib/os-release:/etc/os-release \
      -v /usr/share/ca-certificates/:/etc/ssl/certs \
      -v /sys:/sys:ro \
      -v /var/lib/docker/:/var/lib/docker:rw \
      -v /var/lib/kubelet/:/var/lib/kubelet:rw,rslave \
      -v /run:/run:rw \
      -v /etc/giantswarm/g8s/ssl/master/:/etc/kubernetes/ssl/ \
      -v /etc/kubernetes/config/:/etc/kubernetes/config/ \
      -v /etc/kubernetes/manifests/:/etc/kubernetes/manifests/ \
      -v /etc/kubernetes/cni/:/etc/kubernetes/cni/ \
      -v /opt/cni/bin/calico:/opt/cni/bin/calico \
      -v /opt/cni/bin/calico-ipam:/opt/cni/bin/calico-ipam \
      --name $NAME \
      $IMAGE \
      /hyperkube kubelet \
      --address=${COREOS_PRIVATE_IPV4} \
      --port=10250 \
      --hostname_override=${COREOS_PRIVATE_IPV4} \
      --api-servers=http://127.0.0.1:{{index .TemplatesEnv "g8s_api_insecure_port"}} \
      --containerized \
      --enable-server \
      --logtostderr=true \
      --machine-id-file=/rootfs/etc/machine-id \
      --cadvisor_port=4194 \
      --healthz_bind_address=${COREOS_PRIVATE_IPV4} \
      --healthz_port=10248 \
      --cluster-dns={{index .TemplatesEnv "g8s_cluster_dns"}} \
      --cluster-domain={{index .TemplatesEnv "g8s_cluster_domain"}} \
      --allow-privileged=true \
      --pod-manifest-path=/etc/kubernetes/manifests \
      --kubeconfig=/etc/kubernetes/config/kubelet-kubeconfig.yml \
      --node-labels="name=g8s-%H,role=master" \
      --register-node=true \
      --register-schedulable={{index .TemplatesEnv "g8s_master_schedulable"}} \
      --network-plugin-dir=/etc/kubernetes/cni/net.d \
      --network-plugin=cni \
      --pod-infra-container-image={{index .TemplatesEnv "yochu_private_registry"}}/giantswarm/pause-amd64:3.0 \
      --v=2"
      ExecStop=-/usr/bin/docker stop -t 10 $NAME
      ExecStopPost=-/usr/bin/docker rm -f $NAME
  - name: g8s-addons.service
    enable: true
    command: start
    content: |
      [Unit]
      Description=Kubernetes Addons
      Wants=g8s-kubelet.service
      After=g8s-kubelet.service
      [Service]
      Type=oneshot
      RemainAfterExit=yes
      EnvironmentFile=/etc/environment
      ExecStart=-/opt/g8s-addons
      [Install]
      WantedBy=multi-user.target
  - name: g8s-policy-controller.service
    enable: true
    command: start
    content: |
      [Unit]
      Description=g8s-policy-controller Service
      Wants=g8s-kubelet.service
      Requires=g8s-addons.service
      After=g8s-addons.service

      [Service]
      Restart=always
      RestartSec=10
      EnvironmentFile=/etc/environment
      Environment="IMAGE=calico/kube-policy-controller:{{index .TemplatesEnv "k8s_policy_controller_version"}}"
      Environment="NAME=%p.service"
      Environment="NETWORK_CONFIG_CONTAINER="
      ExecStartPre=/usr/bin/docker pull $IMAGE
      ExecStartPre=-/usr/bin/docker stop -t 10 $NAME
      ExecStartPre=-/usr/bin/docker rm -f $NAME
      ExecStart=/usr/bin/docker run --rm --net=host \
      --name $NAME \
      -e ETCD_ENDPOINTS=http://127.0.0.1:2379 \
      -e K8S_API=http://127.0.0.1:{{index .TemplatesEnv "g8s_api_insecure_port"}} \
      -e LEADER_ELECTION=true \
      $IMAGE
      ExecStop=-/usr/bin/docker stop -t 10 $NAME
      ExecStopPost=-/usr/bin/docker rm -f $NAME
  - name: g8s-leader-elector.service
    enable: true
    command: start
    content: |
      [Unit]
      Description=G8s leader-elector Service
      Requires=g8s-policy-controller.service
      After=g8s-policy-controller.service

      [Service]
      Restart=always
      RestartSec=10
      EnvironmentFile=/etc/environment
      Environment="IMAGE={{index .TemplatesEnv "yochu_private_registry"}}/giantswarm/leader-elector:{{index .TemplatesEnv "leader_elector_version"}}"
      Environment="NAME=%p.service"
      Environment="NETWORK_CONFIG_CONTAINER="
      ExecStartPre=/usr/bin/docker pull $IMAGE
      ExecStartPre=-/usr/bin/docker stop -t 10 $NAME
      ExecStartPre=-/usr/bin/docker rm -f $NAME
      ExecStart=/usr/bin/docker run --rm --net=host \
      --name $NAME \
      $IMAGE \
      --election=calico-policy-election \
      --election-namespace=calico-system \
      --http=127.0.0.1:4040
      ExecStop=-/usr/bin/docker stop -t 10 $NAME
      ExecStopPost=-/usr/bin/docker rm -f $NAME
  - name: g8s-master-api-ping.service
    enable: true
    command: start
    content: |
      [Unit]
      Description=g8s-master-api-ping Service
      Requires=g8s-kubelet.service
      After=g8s-kubelet.service

      [Service]
      Restart=on-failure
      RestartSec=1
      StartLimitInterval=300s
      StartLimitBurst=3
      TimeoutStartSec=0
      EnvironmentFile=/etc/environment
      Environment="IMAGE={{index .TemplatesEnv "yochu_private_registry"}}/giantswarm/ping:{{index .TemplatesEnv "ping_version"}}"
      Environment="NAME=%p.service"
      Environment="NETWORK_CONFIG_CONTAINER="
      ExecStartPre=/usr/bin/docker pull $IMAGE
      ExecStartPre=-/usr/bin/docker stop -t 10 $NAME
      ExecStartPre=-/usr/bin/docker rm -f $NAME
      ExecStart=/usr/bin/docker run --rm -p ${COREOS_PRIVATE_IPV4}:8082:80 --name $NAME $IMAGE \
      --healthcheck \
      --cloudflare \
      --cloudflare-email={{index .TemplatesEnv "cloudflare_email"}} \
      --cloudflare-token={{index .TemplatesEnv "cloudflare_token"}} \
      --cloudflare-ip={{index .TemplatesEnv "cloudflare_ip"}} \
      --cloudflare-domain={{index .TemplatesEnv "cloudflare_domain"}} \
      --cloudflare-subdomain={{index .TemplatesEnv "cloudflare_subdomain"}} \
      --kemp \
      --kemp-rs-unique=false \
      --kemp-endpoint={{index .TemplatesEnv "kemp_endpoint"}} \
      --kemp-password={{index .TemplatesEnv "kemp_password"}} \
      --kemp-rs-ip=${COREOS_PRIVATE_IPV4} \
      --kemp-rs-port={{index .TemplatesEnv "kemp_rs_port"}} \
      --kemp-user={{index .TemplatesEnv "kemp_user"}} \
      --kemp-vs-check-port={{index .TemplatesEnv "kemp_vs_check_port"}} \
      --kemp-vs-type=gen --kemp-vs-ip={{index .TemplatesEnv "kemp_vs_ip"}} \
      --kemp-vs-ports={{index .TemplatesEnv "kemp_vs_ports"}} \
      --kemp-vs-name={{index .TemplatesEnv "kemp_vs_name"}} \
      --kemp-vs-ssl-acceleration=false
      ExecStop=-/usr/bin/docker stop -t 10 $NAME
      ExecStopPost=-/usr/bin/docker rm -f $NAME
{{end}}

{{define "g8s_master_files"}}
- path: "/srv/10-calico.conf"
  owner: root
  permissions: 755
  content: |
    {
        "name": "calico-k8s-network",
        "type": "calico",
        "etcd_endpoints": "http://{{.Host.InternalAddr}}:2379",
        "log_level": "info",
        "ipam": {
            "type": "calico-ipam"
        },
        "mtu": 1430,
        "policy": {
            "type": "k8s",
            "k8s_api_root": "http://127.0.0.1:{{index .TemplatesEnv "g8s_api_insecure_port"}}/api/v1/",
            "k8s_client_certificate": "/etc/kubernetes/ssl/apiserver.pem",
            "k8s_client_key": "/etc/kubernetes/ssl/apiserver-key.pem",
            "k8s_certificate_authority": "/etc/kubernetes/ssl/apiserver-ca.pem"
        }
    }
- path: "/etc/kubernetes/config/proxy-kubeconfig.yml"
  owner: root
  permissions: 420
  content: |
    apiVersion: v1
    kind: Config
    users:
    - name: proxy
      user:
        client-certificate: /etc/kubernetes/ssl/apiserver.pem
        client-key: /etc/kubernetes/ssl/apiserver-key.pem
    clusters:
    - name: local
      cluster:
        certificate-authority: /etc/kubernetes/ssl/apiserver-ca.pem
    contexts:
    - context:
        cluster: local
        user: proxy
      name: service-account-context
    current-context: service-account-context
- path: "/etc/kubernetes/config/kubelet-kubeconfig.yml"
  owner: root
  permissions: 420
  content: |
    apiVersion: v1
    kind: Config
    users:
    - name: kubelet
      user:
        client-certificate: /etc/kubernetes/ssl/apiserver.pem
        client-key: /etc/kubernetes/ssl/apiserver-key.pem
    clusters:
    - name: local
      cluster:
        certificate-authority: /etc/kubernetes/ssl/apiserver-ca.pem
    contexts:
    - context:
        cluster: local
        user: kubelet
      name: service-account-context
    current-context: service-account-context
- path: "/etc/kubernetes/manifests/g8s-proxy.yaml"
  owner: root
  content: |
    apiVersion: v1
    kind: Pod
    metadata:
      name: g8s-proxy
      namespace: kube-system
    spec:
      hostNetwork: true
      containers:
      - name: g8s-proxy
        image: {{index .TemplatesEnv "yochu_private_registry"}}/giantswarm/hyperkube:{{index .TemplatesEnv "hyperkube_version"}}
        command:
        - /hyperkube
        - proxy
        - --master=http://127.0.0.1:{{index .TemplatesEnv "g8s_api_insecure_port"}}
        - --proxy-mode=iptables
        - --logtostderr=true
        - --kubeconfig=/etc/kubernetes/config/proxy-kubeconfig.yml
        - --v=2
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /etc/ssl/certs
          name: ssl-certs-host
          readOnly: true
        - mountPath: /etc/kubernetes/config/
          name: config-kubernetes
          readOnly: true
        - mountPath: /etc/kubernetes/ssl
          name: ssl-certs-kubernetes
          readOnly: true
      volumes:
      - hostPath:
          path: /etc/kubernetes/config/
        name: config-kubernetes
      - hostPath:
          path: /etc/giantswarm/g8s/ssl/master/
        name: ssl-certs-kubernetes
      - hostPath:
          path: /usr/share/ca-certificates
        name: ssl-certs-host
- path: "/etc/kubernetes/config/controller-manager-kubeconfig.yml"
  owner: root
  permissions: 420
  content: |
    apiVersion: v1
    kind: Config
    users:
    - name: controller-manager
      user:
        client-certificate: /etc/kubernetes/ssl/apiserver.pem
        client-key: /etc/kubernetes/ssl/apiserver-key.pem
    clusters:
    - name: local
      cluster:
        certificate-authority: /etc/kubernetes/ssl/apiserver-ca.pem
    contexts:
    - context:
        cluster: local
        user: controller-manager
      name: service-account-context
    current-context: service-account-context
- path: "/etc/kubernetes/config/scheduler-kubeconfig.yml"
  owner: root
  permissions: 420
  content: |
    apiVersion: v1
    kind: Config
    users:
    - name: scheduler
      user:
        client-certificate: /etc/kubernetes/ssl/apiserver.pem
        client-key: /etc/kubernetes/ssl/apiserver-key.pem
    clusters:
    - name: local
      cluster:
        certificate-authority: /etc/kubernetes/ssl/apiserver-ca.pem
    contexts:
    - context:
        cluster: local
        user: scheduler
      name: service-account-context
    current-context: service-account-context
- path: "/etc/kubernetes/manifests/g8s-apiserver.yaml"
  owner: root
  content: |
    apiVersion: v1
    kind: Pod
    metadata:
      name: g8s-apiserver
      namespace: kube-system
    spec:
      hostNetwork: true
      containers:
      - name: g8s-apiserver
        image: {{index .TemplatesEnv "yochu_private_registry"}}/giantswarm/hyperkube:{{index .TemplatesEnv "hyperkube_version"}}
        command:
        - /hyperkube
        - apiserver
        - --apiserver-count={{index .TemplatesEnv "g8s_apiserver_amount"}}
        - --allow-privileged=true
        - --secure-port=6443
        - --runtime-config=extensions/v1beta1/deployments=true,extensions/v1beta1/daemonsets=true,extensions/v1beta1=true,extensions/v1beta1/thirdpartyresources=true,extensions/v1beta1/networkpolicies=true
        - --insecure_bind_address=127.0.0.1
        - --insecure_port={{index .TemplatesEnv "g8s_api_insecure_port"}}
        - --kubelet_https=true
        - --bind-address={{.Host.InternalAddr}}
        - --etcd-prefix=g8s
        - --admission-control=NamespaceLifecycle,LimitRanger,ServiceAccount,ResourceQuota
        - --service-cluster-ip-range={{index .TemplatesEnv "g8s_cluster_subnet"}}
        - --etcd_servers=http://{{.Host.InternalAddr}}:2379
        - --advertise-address={{.Host.InternalAddr}}
        - --logtostderr=true
        - --tls-cert-file=/etc/kubernetes/ssl/apiserver.pem
        - --tls-private-key-file=/etc/kubernetes/ssl/apiserver-key.pem
        - --client-ca-file=/etc/kubernetes/ssl/apiserver-ca.pem
        - --service-account-key-file=/etc/kubernetes/ssl/sa_private_key.pem
        livenessProbe:
          httpGet:
            host: 127.0.0.1
            port: {{index .TemplatesEnv "g8s_api_insecure_port"}}
            path: /healthz
          initialDelaySeconds: 15
          timeoutSeconds: 15
        ports:
        - containerPort: 6443
          hostPort: 6443
          name: https
        - containerPort: {{index .TemplatesEnv "g8s_api_insecure_port"}}
          hostPort: {{index .TemplatesEnv "g8s_api_insecure_port"}}
          name: local
        volumeMounts:
        - mountPath: /etc/kubernetes/ssl/
          name: ssl-certs-kubernetes
          readOnly: true
        - mountPath: /etc/ssl/certs
          name: ssl-certs-host
          readOnly: true
      volumes:
      - hostPath:
          path: /etc/giantswarm/g8s/ssl/master/
        name: ssl-certs-kubernetes
      - hostPath:
          path: /usr/share/ca-certificates
        name: ssl-certs-host
- path: "/etc/kubernetes/manifests/g8s-controller-manager.yaml"
  owner: root
  content: |
    apiVersion: v1
    kind: Pod
    metadata:
      name: g8s-controller-manager
      namespace: kube-system
    spec:
      containers:
      - name: g8s-controller-manager
        image: {{index .TemplatesEnv "yochu_private_registry"}}/giantswarm/hyperkube:{{index .TemplatesEnv "hyperkube_version"}}
        command:
        - /hyperkube
        - controller-manager
        - --master=http://127.0.0.1:{{index .TemplatesEnv "g8s_api_insecure_port"}}
        - --service-account-private-key-file=/etc/kubernetes/ssl/sa_private_key.pem
        - --root-ca-file=/etc/kubernetes/ssl/apiserver-ca.pem
        - --kubeconfig=/etc/kubernetes/config/controller-manager-kubeconfig.yml
        {{if eq (index .TemplatesEnv "g8s_apiserver_amount") "3"}}- --leader-elect=true{{end}}
        resources:
          requests:
            cpu: 200m
        livenessProbe:
          httpGet:
            host: 127.0.0.1
            path: /healthz
            port: 10252
          initialDelaySeconds: 15
          timeoutSeconds: 15
        volumeMounts:
        - mountPath: /etc/kubernetes/ssl
          name: ssl-certs-kubernetes
          readOnly: true
        - mountPath: /etc/ssl/certs
          name: ssl-certs-host
          readOnly: true
        - mountPath: /etc/kubernetes/config
          name: config-kubernetes
          readOnly: true
      hostNetwork: true
      volumes:
      - hostPath:
          path: /etc/giantswarm/g8s/ssl/master/
        name: ssl-certs-kubernetes
      - hostPath:
          path: /usr/share/ca-certificates
        name: ssl-certs-host
      - hostPath:
          path: /etc/kubernetes/config/
        name: config-kubernetes
- path: "/etc/kubernetes/manifests/g8s-scheduler.yaml"
  owner: root
  content: |
    apiVersion: v1
    kind: Pod
    metadata:
      name: g8s-scheduler
      namespace: kube-system
    spec:
      hostNetwork: true
      containers:
      - name: g8s-scheduler
        image: {{index .TemplatesEnv "yochu_private_registry"}}/giantswarm/hyperkube:{{index .TemplatesEnv "hyperkube_version"}}
        command:
        - /hyperkube
        - scheduler
        - --master=http://127.0.0.1:{{index .TemplatesEnv "g8s_api_insecure_port"}}
        - --kubeconfig=/etc/kubernetes/config/scheduler-kubeconfig.yml
        {{if eq (index .TemplatesEnv "g8s_apiserver_amount") "3"}}- --leader-elect=true{{end}}
        resources:
          requests:
            cpu: 100m
        livenessProbe:
          httpGet:
            host: 127.0.0.1
            path: /healthz
            port: 10251
          initialDelaySeconds: 15
          timeoutSeconds: 15
        volumeMounts:
        - mountPath: /etc/kubernetes/config/
          name: config-kubernetes
          readOnly: true
        - mountPath: /etc/kubernetes/ssl
          name: ssl-certs-kubernetes
          readOnly: true
      volumes:
      - hostPath:
          path: /etc/kubernetes/config/
        name: config-kubernetes
      - hostPath:
          path: /etc/giantswarm/g8s/ssl/master/
        name: ssl-certs-kubernetes
- path: "/srv/kubedns-dep.yaml"
  owner: root
  permissions: 644
  content: |
    apiVersion:  extensions/v1beta1
    kind: Deployment
    metadata:
      name: kube-dns-v19
      namespace: kube-system
      labels:
        k8s-app: kube-dns
        version: v19
        kubernetes.io/cluster-service: "true"
    spec:
      replicas: 3
      selector:
        matchLabels:
          k8s-app: kube-dns
          version: v19
      template:
        metadata:
          labels:
            k8s-app: kube-dns
            version: v19
            kubernetes.io/cluster-service: "true"
        spec:
          containers:
          - name: kubedns
            image: {{index .TemplatesEnv "yochu_private_registry"}}/giantswarm/kubedns-amd64:1.6
            volumeMounts:
            - name: config
              mountPath: /etc/kubernetes/config/
              readOnly: false
            - name: ssl
              mountPath: /etc/kubernetes/ssl/
              readOnly: false
            resources:
              limits:
                cpu: 100m
                memory: 170Mi
              requests:
                cpu: 100m
                memory: 70Mi
            args:
            # command = "/kube-dns
            - --dns-port=10053
            - --domain={{index .TemplatesEnv "g8s_cluster_domain"}}.
            - --kubecfg-file=/etc/kubernetes/config/kubelet-kubeconfig.yml
            - --kube-master-url={{index .TemplatesEnv "g8s_api_scheme"}}://{{index .TemplatesEnv "g8s_api_domain_name"}}
            ports:
            - containerPort: 10053
              name: dns-local
              protocol: UDP
            - containerPort: 10053
              name: dns-tcp-local
              protocol: TCP
            livenessProbe:
              httpGet:
                path: /healthz
                port: 8080
                scheme: HTTP
              initialDelaySeconds: 60
              successThreshold: 1
              failureThreshold: 5
              timeoutSeconds: 5
            readinessProbe:
              httpGet:
                path: /readiness
                port: 8081
                scheme: HTTP
              initialDelaySeconds: 30
              timeoutSeconds: 5
          - name: dnsmasq
            image: {{index .TemplatesEnv "yochu_private_registry"}}/giantswarm/kube-dnsmasq-amd64:1.3
            args:
            - --cache-size=1000
            - --no-resolv
            - --server=127.0.0.1#10053
            ports:
            - containerPort: 53
              name: dns
              protocol: UDP
            - containerPort: 53
              name: dns-tcp
              protocol: TCP
          - name: healthz
            image: {{index .TemplatesEnv "yochu_private_registry"}}/giantswarm/exechealthz-amd64:1.1
            resources:
              limits:
                cpu: 10m
                memory: 50Mi
              requests:
                cpu: 10m
                memory: 50Mi
            args:
            - -cmd=nslookup kubernetes.default.svc.{{index .TemplatesEnv "g8s_cluster_domain"}} 127.0.0.1 >/dev/null && nslookup kubernetes.default.svc.{{index .TemplatesEnv "g8s_cluster_domain"}} 127.0.0.1:10053 >/dev/null
            - -port=8080
            - -quiet
            ports:
            - containerPort: 8080
              protocol: TCP
          dnsPolicy: Default  # Don't use cluster DNS.
          volumes:
          - name: config
            hostPath:
              path: /etc/kubernetes/config/
          - name: ssl
            hostPath:
              path: /etc/giantswarm/g8s/ssl/{{if eq (index .TemplatesEnv "g8s_apiserver_amount") "3"}}master/{{else}}worker/{{end}}
- path: "/srv/kubedns-svc.yaml"
  owner: root
  permissions: 644
  content: |
    apiVersion: v1
    kind: Service
    metadata:
      name: kube-dns
      namespace: kube-system
      labels:
        k8s-app: kube-dns
        kubernetes.io/cluster-service: "true"
        kubernetes.io/name: "KubeDNS"
    spec:
      selector:
        k8s-app: kube-dns
      clusterIP: {{index .TemplatesEnv "g8s_cluster_dns"}}
      ports:
      - name: dns
        port: 53
        protocol: UDP
      - name: dns-tcp
        port: 53
        protocol: TCP
- path: /srv/calico-system.json
  owner: root
  permissions: 644
  content: |
    {
      "apiVersion": "v1",
      "kind": "Namespace",
      "metadata": {
        "name": "calico-system"
      }
    }
- path: /opt/g8s-addons
  permissions: 544
  content: |
    #!/bin/bash

    set -eu

    while ! curl --output /dev/null --silent --head --fail "http://127.0.0.1:{{index .TemplatesEnv "g8s_api_insecure_port"}}"; do sleep 1 && echo 'Waiting for master'; done

    echo "K8S: DNS addons"
    curl -H "Content-Type: application/yaml" \
      -XPOST -d"$(cat /srv/kubedns-dep.yaml)" \
      "http://127.0.0.1:{{index .TemplatesEnv "g8s_api_insecure_port"}}/apis/extensions/v1beta1/namespaces/kube-system/deployments"
    curl -H "Content-Type: application/yaml" \
      -XPOST -d"$(cat /srv/kubedns-svc.yaml)" \
      "http://127.0.0.1:{{index .TemplatesEnv "g8s_api_insecure_port"}}/api/v1/namespaces/kube-system/services"
    echo "K8S: Calico Policy"
    curl -H "Content-Type: application/json" \
      -XPOST -d"$(cat /srv/calico-system.json)" \
      "http://127.0.0.1:{{index .TemplatesEnv "g8s_api_insecure_port"}}/api/v1/namespaces/"
{{end}}
