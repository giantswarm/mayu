{{define "g8s_worker_units"}}
  - name: calico-node.service
    runtime: true
    command: start
    content: |
      [Unit]
      Description=Calico per-host agent
      Requires=etcd2.service
      After=etcd2.service
      Wants=etcd2.service

      [Service]
      Restart=always
      RestartSec=0
      TimeoutStopSec=10
      StartLimitIntervalSec=0
      EnvironmentFile=/etc/environment
      Environment="ETCD_AUTHORITY=127.0.0.1:2379"
      ExecStartPre=/usr/bin/mkdir -p /opt/cni/bin
      ExecStartPre=/usr/bin/wget -O /opt/cni/bin/calico {{index .TemplatesEnv "yochu_http_endpoint"}}/calico-cni/{{index .TemplatesEnv "calico_cni_version"}}/calico
      ExecStartPre=/usr/bin/chmod +x /opt/cni/bin/calico
      ExecStartPre=/usr/bin/wget -O /opt/cni/bin/calico-ipam {{index .TemplatesEnv "yochu_http_endpoint"}}/calico-cni/{{index .TemplatesEnv "calico_cni_version"}}/calico-ipam
      ExecStartPre=/usr/bin/chmod +x /opt/cni/bin/calico-ipam
      ExecStartPre=/usr/bin/mkdir -p /opt/bin/
      ExecStartPre=/usr/bin/wget -O /opt/bin/calicoctl {{index .TemplatesEnv "yochu_http_endpoint"}}/calicoctl/{{index .TemplatesEnv "calico_version"}}/calicoctl
      ExecStartPre=/usr/bin/chmod +x /opt/bin/calicoctl
      ExecStart=/opt/bin/calicoctl node --ip={{.Host.InternalAddr}}  --detach=false --node-image={{index .TemplatesEnv "yochu_private_registry"}}/giantswarm/node:{{index .TemplatesEnv "calico_version"}}
      ExecStartPost=/usr/sbin/iptables -I FORWARD -s {{index .TemplatesEnv "yochu_localsubnet"}} -d {{index .TemplatesEnv "calico_g8s_subnet"}} -j ACCEPT
      ExecStartPost=/usr/sbin/iptables -I FORWARD -d {{index .TemplatesEnv "yochu_localsubnet"}} -s {{index .TemplatesEnv "calico_g8s_subnet"}} -j ACCEPT
      ExecStop=/opt/bin/calicoctl node stop --force
      ExecStopPost=/bin/bash -c "find /tmp/ -name '_MEI*' | xargs -I {} rm -rf {}"
      ExecStopPost=/usr/sbin/iptables -D FORWARD -s {{index .TemplatesEnv "yochu_localsubnet"}} -d {{index .TemplatesEnv "calico_g8s_subnet"}} -j ACCEPT
      ExecStopPost=/usr/sbin/iptables -D FORWARD -d {{index .TemplatesEnv "yochu_localsubnet"}} -s {{index .TemplatesEnv "calico_g8s_subnet"}} -j ACCEPT

      [Install]
      WantedBy=multi-user.target
  - name: g8s-worker-api-certs.service
    enable: true
    command: start
    content: |
      [Unit]
      Description=g8s-worker-api-certs
      Requires=docker.service
      After=docker.service

      [Service]
      EnvironmentFile=/etc/environment
      Type=oneshot
      RemainAfterExit=yes
      ExecStartPre=/usr/bin/mkdir -p /etc/giantswarm/g8s/ssl/worker/
      ExecStart=/usr/bin/bash -c '/usr/bin/docker run \
      --net=host \
      -v /etc/ssl/certs/ca-certificates.crt:/etc/ssl/certs/ca-certificates.crt \
      -v /etc/giantswarm/g8s/ssl/worker/:/etc/kubernetes/ssl/ \
      {{index .TemplatesEnv "yochu_private_registry"}}/giantswarm/certctl:{{index .TemplatesEnv "certctl_version"}} \
      issue \
      --vault-addr={{index .TemplatesEnv "vault_addr"}} \
      --vault-token={{index .TemplatesEnv "vault_token"}} \
      --cluster-id={{index .TemplatesEnv "cluster_id"}} \
      --common-name=worker-{{.Host.Hostname}}.{{index .TemplatesEnv "common_name"}} \
      --ttl={{index .TemplatesEnv "g8s_certs_ttl"}} \
      --crt-file=/etc/kubernetes/ssl/worker.pem \
      --ip-sans={{index .TemplatesEnv "g8s_api_ip_sans"}} \
      --alt-names={{index .TemplatesEnv "g8s_api_alt_names"}} \
      --key-file=/etc/kubernetes/ssl/worker-key.pem \
      --ca-file=/etc/kubernetes/ssl/worker-ca.pem'
      ExecStop=/usr/bin/rm -rf /etc/giantswarm/g8s/ssl/worker/
  - name: g8s-kubelet.service
    enable: true
    command: start
    content: |
      [Unit]
      Description=g8s-kubelet
      Wants=calico-node.service g8s-worker-api-certs.service
      After=calico-node.service

      [Service]
      Restart=always
      RestartSec=10
      EnvironmentFile=/etc/environment
      Environment="IMAGE={{index .TemplatesEnv "yochu_private_registry"}}/giantswarm/hyperkube:{{index .TemplatesEnv "hyperkube_version"}}"
      Environment="NAME=%p.service"
      Environment="NETWORK_CONFIG_CONTAINER="
      ExecStartPre=/usr/bin/docker pull $IMAGE
      ExecStartPre=-/usr/bin/docker stop -t 10 $NAME
      ExecStartPre=-/usr/bin/docker rm -f $NAME
      ExecStartPre=/usr/bin/mkdir -p /etc/kubernetes/cni/net.d/
      ExecStartPre=-/usr/bin/cp /srv/10-calico.conf /etc/kubernetes/cni/net.d/10-calico.conf
      ExecStart=/bin/sh -c "/usr/bin/docker run --rm --pid=host --net=host --privileged=true \
      -v /:/rootfs:ro \
      -v /usr/lib/os-release:/etc/os-release \
      -v /usr/share/ca-certificates/:/etc/ssl/certs \
      -v /sys:/sys:ro \
      -v /var/lib/docker/:/var/lib/docker:rw \
      -v /var/lib/kubelet/:/var/lib/kubelet:rw,rslave \
      -v /run:/run:rw \
      -v /etc/giantswarm/g8s/ssl/worker/:/etc/kubernetes/ssl/ \
      -v /etc/kubernetes/config/:/etc/kubernetes/config/ \
      -v /etc/kubernetes/manifests/:/etc/kubernetes/manifests/ \
      -v /etc/kubernetes/cni/:/etc/kubernetes/cni/ \
      -v /opt/cni/bin/calico:/opt/cni/bin/calico \
      -v /opt/cni/bin/calico-ipam:/opt/cni/bin/calico-ipam \
      --name $NAME \
      $IMAGE \
      /hyperkube kubelet \
      --address=${COREOS_PRIVATE_IPV4} \
      --port=10250 \
      --hostname_override=${COREOS_PRIVATE_IPV4} \
      --api-servers={{index .TemplatesEnv "g8s_api_scheme"}}://api.{{index .TemplatesEnv "common_name"}} \
      --containerized \
      --enable-server \
      --logtostderr=true \
      --machine-id-file=/rootfs/etc/machine-id \
      --cadvisor_port=4194 \
      --healthz_bind_address=${COREOS_PRIVATE_IPV4} \
      --healthz_port=10248 \
      --cluster-dns={{index .TemplatesEnv "g8s_cluster_dns"}} \
      --cluster-domain={{index .TemplatesEnv "g8s_cluster_domain"}} \
      --register-node=true \
      --allow-privileged=true \
      --pod-manifest-path=/etc/kubernetes/manifests \
      --kubeconfig=/etc/kubernetes/config/kubelet-kubeconfig.yml \
      --node-labels="name=g8s-worker-%H,role=worker" \
      --network-plugin-dir=/etc/kubernetes/cni/net.d \
      --network-plugin=cni \
      --pod-infra-container-image={{index .TemplatesEnv "yochu_private_registry"}}/giantswarm/pause-amd64:3.0 \
      --v=2"
      ExecStop=-/usr/bin/docker stop -t 10 $NAME
      ExecStopPost=-/usr/bin/docker rm -f $NAME
{{end}}

{{define "g8s_worker_files"}}
- path: "/srv/10-calico.conf"
  owner: root
  permissions: 755
  content: |
    {
        "name": "calico-k8s-network",
        "type": "calico",
        "etcd_endpoints": "http://{{.Host.InternalAddr}}:2379",
        "log_level": "info",
        "ipam": {
            "type": "calico-ipam"
        },
        "mtu": 1430,
        "policy": {
            "type": "k8s",
            "k8s_api_root": "{{index .TemplatesEnv "g8s_api_scheme"}}://api.{{index .TemplatesEnv "common_name"}}/api/v1/",
            "k8s_client_certificate": "/etc/kubernetes/ssl/worker.pem",
            "k8s_client_key": "/etc/kubernetes/ssl/worker-key.pem",
            "k8s_certificate_authority": "/etc/kubernetes/ssl/worker-ca.pem"
        }
    }
- path: "/etc/kubernetes/config/proxy-kubeconfig.yml"
  owner: root
  permissions: 420
  content: |
    apiVersion: v1
    kind: Config
    users:
    - name: proxy
      user:
        client-certificate: /etc/kubernetes/ssl/worker.pem
        client-key: /etc/kubernetes/ssl/worker-key.pem
    clusters:
    - name: local
      cluster:
        certificate-authority: /etc/kubernetes/ssl/worker-ca.pem
    contexts:
    - context:
        cluster: local
        user: proxy
      name: service-account-context
    current-context: service-account-context
- path: "/etc/kubernetes/config/kubelet-kubeconfig.yml"
  owner: root
  permissions: 420
  content: |
    apiVersion: v1
    kind: Config
    users:
    - name: kubelet
      user:
        client-certificate: /etc/kubernetes/ssl/worker.pem
        client-key: /etc/kubernetes/ssl/worker-key.pem
    clusters:
    - name: local
      cluster:
        certificate-authority: /etc/kubernetes/ssl/worker-ca.pem
    contexts:
    - context:
        cluster: local
        user: kubelet
      name: service-account-context
    current-context: service-account-context
- path: "/etc/kubernetes/manifests/g8s-proxy.yaml"
  owner: root
  content: |
    apiVersion: v1
    kind: Pod
    metadata:
      name: g8s-proxy
      namespace: kube-system
    spec:
      hostNetwork: true
      containers:
      - name: g8s-proxy
        image: {{index .TemplatesEnv "yochu_private_registry"}}/giantswarm/hyperkube:{{index .TemplatesEnv "hyperkube_version"}}
        command:
        - /hyperkube
        - proxy
        - --master={{index .TemplatesEnv "g8s_api_scheme"}}://api.{{index .TemplatesEnv "common_name"}}
        - --proxy-mode=iptables
        - --logtostderr=true
        - --kubeconfig=/etc/kubernetes/config/proxy-kubeconfig.yml
        - --v=2
        securityContext:
          privileged: true
        volumeMounts:
        - mountPath: /etc/ssl/certs
          name: ssl-certs-host
          readOnly: true
        - mountPath: /etc/kubernetes/config/
          name: config-kubernetes
          readOnly: true
        - mountPath: /etc/kubernetes/ssl
          name: ssl-certs-kubernetes
          readOnly: true
      volumes:
      - hostPath:
          path: /etc/kubernetes/config/
        name: config-kubernetes
      - hostPath:
          path: /etc/giantswarm/g8s/ssl/worker/
        name: ssl-certs-kubernetes
      - hostPath:
          path: /usr/share/ca-certificates
        name: ssl-certs-host
{{end}}
